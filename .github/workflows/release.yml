name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.2.3). If provided, a release will be created/updated.'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-13]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Compute version from tag and sync version.py
        id: version
        env:
          TAG_INPUT: ${{ github.event.inputs.tag }}
        run: |
          python - << 'PY'
          import os, re
          tag_input = os.environ.get('TAG_INPUT', '')
          ref = os.environ.get('GITHUB_REF', '')
          ref_name = os.environ.get('GITHUB_REF_NAME', '')
          tag = ref_name if ref.startswith('refs/tags/') else (tag_input or '')
          if tag:
              ver = tag.lstrip('vV')
              with open('version.py','r',encoding='utf-8') as f:
                  s = f.read()
              s2 = re.sub(r'__version__\s*=\s*".*?"', f'__version__ = "{ver}"', s)
              if s2 != s:
                  with open('version.py','w',encoding='utf-8') as f:
                      f.write(s2)
          else:
              import version as _v
              ver = _v.__version__
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as out:
              out.write(f'version={ver}\n')
          PY

      - name: Build executable
        run: |
          # 注入构建元信息，标记为官方GitHub Actions构建
          if [ -f version.py ]; then
            grep -q '__build_channel__' version.py || echo '__build_channel__ = "github-actions"' >> version.py
            grep -q '__build_time__' version.py || echo "__build_time__ = '$(date -u +'%Y-%m-%d %H:%M:%S UTC')'" >> version.py
          fi
          python build_app.py

      - name: Rename and zip artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}
        run: |
          $arch = "$env:RUNNER_ARCH"
          $exe = "dist/TomatoNovelDownloader.exe"
          if (!(Test-Path $exe)) { throw "Not found: $exe" }
          $new = "dist/TomatoNovelDownloader_v$env:APP_VERSION`_windows_$arch.exe"
          Move-Item $exe $new -Force
          $zip = [System.IO.Path]::ChangeExtension($new, ".zip")
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path $new -DestinationPath $zip -Force

      - name: Rename and zip artifact (*nix)
        if: runner.os != 'Windows'
        shell: bash
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}
        run: |
          set -euo pipefail
          arch="${RUNNER_ARCH}"
          plat=$(echo "${RUNNER_OS}" | tr '[:upper:]' '[:lower:]')
          if [ -d "dist/TomatoNovelDownloader.app" ]; then
            name="dist/TomatoNovelDownloader_v${APP_VERSION}_${plat}_${arch}.app"
            mv "dist/TomatoNovelDownloader.app" "$name"
            zip -r -9 "${name%.app}.zip" "$(basename "$name")" -x "*.DS_Store" -x "__MACOSX"
          elif [ -f "dist/TomatoNovelDownloader" ]; then
            name="dist/TomatoNovelDownloader_v${APP_VERSION}_${plat}_${arch}"
            mv "dist/TomatoNovelDownloader" "$name"
            zip -9 -j "${name}.zip" "$name"
          else
            echo "No expected build output found in dist/" >&2
            ls -la dist/ || true
            exit 1
          fi

      - name: Upload artifact (per-OS)
        uses: actions/upload-artifact@v4
        with:
          name: TomatoNovelDownloader-${{ matrix.os }}
          path: |
            dist/*

  publish:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Compute version
        id: version
        env:
          TAG_INPUT: ${{ github.event.inputs.tag }}
        run: |
          python - << 'PY'
          import os
          ref = os.environ.get('GITHUB_REF','')
          ref_name = os.environ.get('GITHUB_REF_NAME','')
          tag = ref_name if ref.startswith('refs/tags/') else os.environ.get('TAG_INPUT','')
          ver = tag.lstrip('vV') if tag else ''
          if not ver:
              import version as _v
              ver = _v.__version__
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as out:
              out.write(f'version={ver}\n')
          PY

      - name: Build release metadata
        id: meta
        run: |
          short="${GITHUB_SHA::7}"
          tz="Asia/Shanghai"
          build_time=$(TZ=$tz date '+%Y-%m-%d %H:%M:%S (%Z)')
          echo "short_sha=$short" >> "$GITHUB_OUTPUT"
          echo "build_time=$build_time" >> "$GITHUB_OUTPUT"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: TomatoNovelDownloader-*
          merge-multiple: true
          path: release_assets

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') || (github.event.inputs.tag != '')
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.tag }}
          name: Tomato Novel Downloader v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Version: v${{ steps.version.outputs.version }}
            Build time: ${{ steps.meta.outputs.build_time }}
            Commit: ${{ steps.meta.outputs.short_sha }}
          files: |
            release_assets/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
name: Build Release and Debug

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 生成版本号的job
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      build_time: ${{ steps.version.outputs.BUILD_TIME }}
    steps:
      - name: Generate version
        id: version
        run: |
          VERSION=$(date -u +'%Y.%m.%d.%H%M')+$(echo ${{ github.sha }} | cut -c1-7)
          BUILD_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          echo "Build time: $BUILD_TIME"

  build:
    needs: version
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 构建
          - os: windows-latest
            variant: release
            executable: TomatoNovelDownloader.exe
            artifact_name: TomatoNovelDownloader-windows
          - os: windows-latest
            variant: debug
            executable: TomatoNovelDownloader-debug.exe
            artifact_name: TomatoNovelDownloader-debug-windows
          # Linux 构建
          - os: ubuntu-latest
            variant: release
            executable: TomatoNovelDownloader-linux
            artifact_name: TomatoNovelDownloader-linux
          - os: ubuntu-latest
            variant: debug
            executable: TomatoNovelDownloader-debug-linux
            artifact_name: TomatoNovelDownloader-debug-linux
          # macOS 构建
          - os: macos-latest
            variant: release
            executable: TomatoNovelDownloader-macos
            artifact_name: TomatoNovelDownloader-macos
          - os: macos-latest
            variant: debug
            executable: TomatoNovelDownloader-debug-macos
            artifact_name: TomatoNovelDownloader-debug-macos

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} - ${{ matrix.variant }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install tcl-tk || true

      - name: Update version.py
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          BUILD_TIME="${{ needs.version.outputs.build_time }}"
          echo "Using version: $VERSION"
          echo "Using build time: $BUILD_TIME"
          
          # 创建version.py文件
          echo "# -*- coding: utf-8 -*-" > version.py
          echo '"""' >> version.py
          echo "版本信息文件 - GitHub Actions自动生成" >> version.py
          echo '"""' >> version.py
          echo "" >> version.py
          echo "__version__ = \"$VERSION\"" >> version.py
          echo "__author__ = \"Tomato Novel Downloader\"" >> version.py
          echo "__description__ = \"A modern novel downloader with GitHub auto-update support\"" >> version.py
          echo "__github_repo__ = \"POf-L/Fanqie-novel-Downloader\"" >> version.py
          echo "__build_time__ = \"$BUILD_TIME\"" >> version.py
          echo "__build_channel__ = \"github-actions\"" >> version.py
          
          echo "更新后的version.py:"
          cat version.py
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build application (${{ matrix.variant }})
        run: |
          if [ "${{ matrix.variant }}" == "debug" ]; then
            # Debug版本 - 带控制台
            pyinstaller --onefile --console --name=${{ matrix.executable }} \
              --hidden-import=bs4 \
              --hidden-import=fake_useragent \
              --hidden-import=fake_useragent.data \
              --hidden-import=tqdm \
              --hidden-import=requests \
              --hidden-import=urllib3 \
              --hidden-import=ebooklib \
              --hidden-import=PIL \
              --hidden-import=PIL.Image \
              --hidden-import=PIL.ImageTk \
              --hidden-import=PIL.ImageDraw \
              --hidden-import=PIL.ImageFile \
              --hidden-import=PIL.JpegImagePlugin \
              --hidden-import=PIL.PngImagePlugin \
              --hidden-import=pillow_heif \
              --collect-data=fake_useragent \
              gui.py
          else
            # Release版本 - 窗口模式
            pyinstaller --onefile --windowed --name=${{ matrix.executable }} \
              --hidden-import=bs4 \
              --hidden-import=fake_useragent \
              --hidden-import=fake_useragent.data \
              --hidden-import=tqdm \
              --hidden-import=requests \
              --hidden-import=urllib3 \
              --hidden-import=ebooklib \
              --hidden-import=PIL \
              --hidden-import=PIL.Image \
              --hidden-import=PIL.ImageTk \
              --hidden-import=PIL.ImageDraw \
              --hidden-import=PIL.ImageFile \
              --hidden-import=PIL.JpegImagePlugin \
              --hidden-import=PIL.PngImagePlugin \
              --hidden-import=pillow_heif \
              --collect-data=fake_useragent \
              gui.py
          fi
        shell: bash

      - name: Verify build
        run: |
          ls -la dist/
          if [ -f "dist/${{ matrix.executable }}" ]; then
            echo "✅ Build successful: ${{ matrix.executable }}"
            echo "File size: $(ls -lh dist/${{ matrix.executable }} | awk '{print $5}')"
          else
            echo "❌ Build failed: ${{ matrix.executable }} not found"
            exit 1
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.executable }}
          if-no-files-found: error

  release:
    name: Create Release
    if: github.ref == 'refs/heads/main'
    needs: [version, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: TomatoNovelDownloader v${{ needs.version.outputs.version }}
          body: |
            ## ${{ github.event.head_commit.message }}
            
            **构建信息:**
            - 构建时间: ${{ needs.version.outputs.build_time }}
            - 提交哈希: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
            - 提交者: ${{ github.event.head_commit.author.name }}

            **支持平台:**
            - 💻 Windows (x64): `TomatoNovelDownloader-windows` + debug版
            - 🐧 Linux (x64): `TomatoNovelDownloader-linux` + debug版  
            - 🍎 macOS: `TomatoNovelDownloader-macos` + debug版

            **使用说明:**
            - 分发版：正常使用的版本，无控制台输出
            - Debug版：包含详细调试信息，遇到问题时使用

          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build Release and Debug

on:
  push:
    branches: [ main ]
    paths:
      - 'version.py'
      - '.github/workflows/build-release.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 读取并验证版本号的 job（以 version.py 为唯一来源）
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read.outputs.version }}
      build_time: ${{ steps.meta.outputs.build_time }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Read version from version.py and validate
        id: read
        run: |
          python - << 'PY'
          import os, re, sys
          from pathlib import Path
          p = Path('version.py')
          s = p.read_text(encoding='utf-8')
          m = re.search(r'__version__\s*=\s*"([^"]+)"', s)
          if not m:
              print('ERROR: __version__ not found in version.py', file=sys.stderr)
              sys.exit(1)
          ver = m.group(1).strip()
          # 语义化版本校验: 允许预发布后缀，如 -beta.1
          semver = re.compile(r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-[0-9A-Za-z.-]+)?$')
          if not semver.match(ver):
              print(f'ERROR: invalid semantic version: {ver}', file=sys.stderr)
              sys.exit(1)
          print(f'version={ver}', file=sys.stdout)
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as out:
              out.write(f'version={ver}\n')
          PY
      - name: Build metadata
        id: meta
        run: |
          echo "build_time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

  build:
    needs: version
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 构建
          - os: windows-latest
            variant: release
            executable: TomatoNovelDownloader
            artifact_name: TomatoNovelDownloader-windows
          - os: windows-latest
            variant: debug
            executable: TomatoNovelDownloader-debug
            artifact_name: TomatoNovelDownloader-debug-windows
          # Linux 构建
          - os: ubuntu-latest
            variant: release
            executable: TomatoNovelDownloader-linux
            artifact_name: TomatoNovelDownloader-linux
          - os: ubuntu-latest
            variant: debug
            executable: TomatoNovelDownloader-debug-linux
            artifact_name: TomatoNovelDownloader-debug-linux
          # macOS 构建
          - os: macos-latest
            variant: release
            executable: TomatoNovelDownloader-macos
            artifact_name: TomatoNovelDownloader-macos
          - os: macos-latest
            variant: debug
            executable: TomatoNovelDownloader-debug-macos
            artifact_name: TomatoNovelDownloader-debug-macos

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} - ${{ matrix.variant }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install tcl-tk || true

      # 不再改写 version.py，完全以仓库中的 version.py 为准
      - name: Show version
        run: |
          echo "Using version: ${{ needs.version.outputs.version }}"
          echo "Build time: ${{ needs.version.outputs.build_time }}"
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build application (${{ matrix.variant }})
        shell: bash
        run: |
          if [ "${{ matrix.variant }}" == "debug" ]; then
            # Debug版本 - 带控制台
            pyinstaller --onefile --console --name=${{ matrix.executable }} \
              --hidden-import=bs4 \
              --hidden-import=fake_useragent \
              --hidden-import=fake_useragent.data \
              --hidden-import=tqdm \
              --hidden-import=requests \
              --hidden-import=urllib3 \
              --hidden-import=ebooklib \
              --hidden-import=PIL \
              --hidden-import=PIL.Image \
              --hidden-import=PIL.ImageTk \
              --hidden-import=PIL.ImageDraw \
              --hidden-import=PIL.ImageFile \
              --hidden-import=PIL.JpegImagePlugin \
              --hidden-import=PIL.PngImagePlugin \
              --hidden-import=pillow_heif \
              --collect-data=fake_useragent \
              gui.py
          else
            # Release版本 - 窗口模式
            pyinstaller --onefile --windowed --name=${{ matrix.executable }} \
              --hidden-import=bs4 \
              --hidden-import=fake_useragent \
              --hidden-import=fake_useragent.data \
              --hidden-import=tqdm \
              --hidden-import=requests \
              --hidden-import=urllib3 \
              --hidden-import=ebooklib \
              --hidden-import=PIL \
              --hidden-import=PIL.Image \
              --hidden-import=PIL.ImageTk \
              --hidden-import=PIL.ImageDraw \
              --hidden-import=PIL.ImageFile \
              --hidden-import=PIL.JpegImagePlugin \
              --hidden-import=PIL.PngImagePlugin \
              --hidden-import=pillow_heif \
              --collect-data=fake_useragent \
              gui.py
          fi

      - name: Rename artifacts to include version
        shell: bash
        env:
          APP_VERSION: ${{ needs.version.outputs.version }}
        run: |
          set -euo pipefail
          mkdir -p renamed
          ext=""
          if [ "${{ runner.os }}" = "Windows" ]; then ext=".exe"; fi
          src="dist/${{ matrix.executable }}$ext"
          if [ ! -f "$src" ]; then echo "Not found: $src" >&2; exit 1; fi
          base="${{ matrix.executable }}"
          # 插入版本号到文件名（保持原有名字模式）
          if [ -n "$ext" ]; then
            name="${base}_v${APP_VERSION}$ext"
          else
            name="${base}_v${APP_VERSION}"
          fi
          cp "$src" "renamed/$name"
          echo "Renamed to: renamed/$name"

      - name: Upload artifact (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-v${{ needs.version.outputs.version }}
          path: renamed/*
          if-no-files-found: error



      - name: Verify build
        run: |
          ls -la dist/
          ext=""
          if [ "${{ runner.os }}" = "Windows" ]; then ext=".exe"; fi
          target="dist/${{ matrix.executable }}$ext"
          if [ -f "$target" ]; then
            echo "✅ Build successful: $(basename "$target")"
            echo "File size: $(ls -lh "$target" | awk '{print $5}')"
          else
            echo "❌ Build failed: $target not found"
            exit 1
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            dist/${{ matrix.executable }}.exe
            dist/${{ matrix.executable }}
          if-no-files-found: error

  release:
    name: Create Release
    if: github.ref == 'refs/heads/main'
    needs: [version, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Fetch tags
        run: |
          git fetch --tags --depth=1

      - name: Ensure tag exists for version
        env:
          V: ${{ needs.version.outputs.version }}
        run: |
          set -euo pipefail
          if git rev-parse -q --verify "refs/tags/v$V" >/dev/null; then
            echo "Tag v$V already exists"
          else
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag -a "v$V" -m "Release v$V"
            git push origin "v$V"
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: TomatoNovelDownloader v${{ needs.version.outputs.version }}
          append_body: true
          overwrite_files: true
          make_latest: true
          body: |
            ## 自动发布

            **构建信息:**
            - 构建时间: ${{ needs.version.outputs.build_time }}
            - 提交哈希: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}

            **支持平台:**
            - 💻 Windows (x64): `TomatoNovelDownloader.exe` 与 `TomatoNovelDownloader-debug.exe`
            - 🐧 Linux (x64): 标准版与 Debug 版
            - 🍎 macOS: 标准版与 Debug 版

            **说明:**
            - 标准版：正常使用的版本
            - Debug版：包含详细调试信息

          files: |
            artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
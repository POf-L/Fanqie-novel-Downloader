name: Build Release and Debug

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ÁîüÊàêÁâàÊú¨Âè∑ÁöÑjob
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      build_time: ${{ steps.version.outputs.BUILD_TIME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Generate version
        id: version
        run: |
          VERSION=$(date -u +'%Y.%m.%d.%H%M')+$(echo ${{ github.sha }} | cut -c1-7)
          BUILD_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          echo "Build time: $BUILD_TIME"

  build:
    needs: version
    strategy:
      fail-fast: false
      matrix:
        include:

          # Windows ÊûÑÂª∫
          - os: windows-latest
            variant: release
            executable: TomatoNovelDownloader
            ext: .exe
            artifact_name: TomatoNovelDownloader-windows
          - os: windows-latest
            variant: debug
            executable: TomatoNovelDownloader-debug
            ext: .exe
            artifact_name: TomatoNovelDownloader-debug-windows
          # Linux ÊûÑÂª∫
          - os: ubuntu-latest
            variant: release
            executable: TomatoNovelDownloader-linux
            ext: ''
            artifact_name: TomatoNovelDownloader-linux
          - os: ubuntu-latest
            variant: debug
            executable: TomatoNovelDownloader-debug-linux
            ext: ''
            artifact_name: TomatoNovelDownloader-debug-linux
          # macOS ÊûÑÂª∫
          - os: macos-latest
            variant: release
            executable: TomatoNovelDownloader-macos
            ext: ''
            artifact_name: TomatoNovelDownloader-macos
          - os: macos-latest
            variant: debug
            executable: TomatoNovelDownloader-debug-macos
            ext: ''
            artifact_name: TomatoNovelDownloader-debug-macos

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} - ${{ matrix.variant }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk-dev libheif1 libheif-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install tcl-tk libheif || true

      - name: Update version.py
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          BUILD_TIME="${{ needs.version.outputs.build_time }}"
          echo "Using version: $VERSION"
          echo "Using build time: $BUILD_TIME"
          
          # ÂÆåÂÖ®ÈáçÂÜôversion.pyÊñá‰ª∂ÔºåÁ°Æ‰øù__build_channel__Ê≠£Á°ÆËÆæÁΩÆ
          echo "# -*- coding: utf-8 -*-" > version.py
          echo '"""' >> version.py
          echo "ÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂ - GitHub ActionsËá™Âä®ÁîüÊàê" >> version.py
          echo '"""' >> version.py
          echo "" >> version.py
          echo "__version__ = \"$VERSION\"" >> version.py
          echo "__author__ = \"Tomato Novel Downloader\"" >> version.py
          echo "__description__ = \"A modern novel downloader with GitHub auto-update support\"" >> version.py
          echo "__github_repo__ = \"POf-L/Fanqie-novel-Downloader\"" >> version.py
          echo "__build_time__ = \"$BUILD_TIME\"" >> version.py
          echo "__build_channel__ = \"github-actions\"" >> version.py
          
          echo "‚úÖ Êõ¥Êñ∞ÂêéÁöÑversion.py:"
          cat version.py
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --prefer-binary -r requirements.txt
          python -m pip install --prefer-binary pyinstaller
        shell: bash

      - name: Build application (${{ matrix.variant }})
        run: |
          python build_app.py --variant=${{ matrix.variant }} --name=${{ matrix.executable }}
        shell: bash

      - name: Verify build
        run: |
          ls -la dist/
          target="dist/${{ matrix.executable }}${{ matrix.ext }}"
          if [ -f "$target" ]; then
            echo "‚úÖ Build successful: $(basename "$target")"
            echo "File size: $(ls -lh "$target" | awk '{print $5}')"
          else
            echo "‚ùå Build failed: $(basename "$target") not found"
            exit 1
          fi
        shell: bash

      - name: Install NSIS (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install nsis -y
        shell: powershell

      - name: Build Windows installer (NSIS)
        if: runner.os == 'Windows'
        run: |
          $version = "${{ needs.version.outputs.version }}"
          $exeName = "${{ matrix.executable }}${{ matrix.ext }}"
          $setupName = "${{ matrix.executable }}-Setup-$version.exe"

          $nsi = @"
          !define APPNAME "Tomato Novel Downloader"
          !define VERSION "$version"
          OutFile "dist\$setupName"
          InstallDir "$PROGRAMFILES64\TomatoNovelDownloader"
          RequestExecutionLevel admin

          Page directory
          Page instfiles
          UninstPage uninstConfirm
          UninstPage instfiles

          Section "Install"
            SetOutPath "$INSTDIR"
            File "/oname:TomatoNovelDownloader.exe" "dist\$exeName"
            CreateDirectory "$SMPROGRAMS\TomatoNovelDownloader"
            CreateShortcut "$SMPROGRAMS\TomatoNovelDownloader\TomatoNovelDownloader.lnk" "$INSTDIR\TomatoNovelDownloader.exe"
            CreateShortcut "$DESKTOP\TomatoNovelDownloader.lnk" "$INSTDIR\TomatoNovelDownloader.exe"
            WriteUninstaller "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TomatoNovelDownloader" "DisplayName" "Tomato Novel Downloader"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TomatoNovelDownloader" "UninstallString" "$INSTDIR\Uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TomatoNovelDownloader" "DisplayIcon" "$INSTDIR\TomatoNovelDownloader.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TomatoNovelDownloader" "DisplayVersion" "${VERSION}"
          SectionEnd

          Section "Uninstall"
            Delete "$SMPROGRAMS\TomatoNovelDownloader\TomatoNovelDownloader.lnk"
            RMDir "$SMPROGRAMS\TomatoNovelDownloader"
            Delete "$INSTDIR\TomatoNovelDownloader.exe"
            Delete "$INSTDIR\Uninstall.exe"
            RMDir "$INSTDIR"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\TomatoNovelDownloader"
          SectionEnd
          "@

          Set-Content -Path installer.nsi -Value $nsi -Encoding ASCII
          & "${env:ProgramFiles(x86)}\NSIS\makensis.exe" installer.nsi
          if (-not $?) { throw "NSIS build failed" }
          Write-Host "Built installer: dist/$setupName"
        shell: powershell

      - name: Upload artifact (Windows installer)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.executable }}-Setup-${{ needs.version.outputs.version }}.exe
          if-no-files-found: error

      - name: Upload artifact (Windows raw exe for auto-update)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.executable }}${{ matrix.ext }}
          if-no-files-found: error

      - name: Upload artifact (non-Windows binary)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.executable }}${{ matrix.ext }}
          if-no-files-found: error

  release:
    name: Create Release
    if: github.ref == 'refs/heads/main'
    needs: [version, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f \( -name '*-Setup-*.exe' -o ! -name '*.exe' \) -exec cp {} release/ \;
          ls -lh release/
        shell: bash

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: TomatoNovelDownloader v${{ needs.version.outputs.version }}
          body: |
            ## üì¶ Release ${{ needs.version.outputs.version }}
            
            ### Êèê‰∫§‰ø°ÊÅØ
            ${{ github.event.head_commit.message }}
            
            ### ÊûÑÂª∫‰ø°ÊÅØ
            - **ÊûÑÂª∫Êó∂Èó¥**: ${{ needs.version.outputs.build_time }}
            - **Êèê‰∫§ÂìàÂ∏å**: `${{ github.sha }}`
            - **ÂàÜÊîØ**: ${{ github.ref_name }}
            - **Êèê‰∫§ËÄÖ**: ${{ github.event.head_commit.author.name }}

            ### ÊîØÊåÅÂπ≥Âè∞
            - üíª **Windows (x64)**:
              - `TomatoNovelDownloader.exe` (ReleaseÁâàÔºåÊó†ÊéßÂà∂Âè∞)
              - `TomatoNovelDownloader-debug.exe` (DebugÁâàÔºåÂ∏¶ÊéßÂà∂Âè∞ËæìÂá∫)
            - üêß **Linux (x64)**:
              - `TomatoNovelDownloader-linux` (ReleaseÁâà)
              - `TomatoNovelDownloader-debug-linux` (DebugÁâà)
            - üçé **macOS (Intel & Apple Silicon)**:
              - `TomatoNovelDownloader-macos` (ReleaseÁâà)
              - `TomatoNovelDownloader-debug-macos` (DebugÁâà)

            ### ‰ΩøÁî®ËØ¥Êòé
            1. **ReleaseÁâà**: ÈÄÇÂêàÊó•Â∏∏‰ΩøÁî®ÔºåÊó†ÊéßÂà∂Âè∞Á™óÂè£ÔºåÁïåÈù¢Êõ¥ÁÆÄÊ¥Å
            2. **DebugÁâà**: ÂåÖÂê´ËØ¶ÁªÜÊó•ÂøóËæìÂá∫ÔºåÈÅáÂà∞ÈóÆÈ¢òÊó∂‰ΩøÁî®Ê≠§ÁâàÊú¨Êñπ‰æøÊéíÊü•
            
            ### ‰∏ãËΩΩÊèêÁ§∫
            - WindowsÁî®Êà∑ËØ∑‰∏ãËΩΩ `.exe` Êñá‰ª∂
            - LinuxÁî®Êà∑ËØ∑‰∏ãËΩΩÂêéÊâßË°å `chmod +x` Ëµã‰∫àÊâßË°åÊùÉÈôê
            - macOSÁî®Êà∑È¶ñÊ¨°ËøêË°åÂèØËÉΩÈúÄË¶ÅÂú®"Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ > ÂÆâÂÖ®ÊÄß‰∏éÈöêÁßÅ"‰∏≠ÂÖÅËÆ∏ËøêË°å

          files: release/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
